# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk1lLcrULFAqN9up6hpp_jNMyiuEbRrP
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta, time

st.set_page_config(page_title="🛠️ Calcul du Temps de Montage", layout="centered")

# Afficher le logo
st.image("SAF.PA-6138d0ad.png", width=150)  
st.title("Estimation du Temps de Montage")

#  Fonction intelligente pour gérer les plages disponibles

def trouver_disponibilite(date_jour, h_debut_jour, h_fin_jour, planning, temps_requis):
    debut_jour = datetime.combine(date_jour, h_debut_jour)
    fin_jour = datetime.combine(date_jour, h_fin_jour)

    # Extraire les plages occupées ce jour-là
    taches = []
    for _, row in planning.iterrows():
        if row["date"] == str(date_jour):
            d = datetime.combine(date_jour, datetime.strptime(row["heure_debut"], "%H:%M").time())
            f = datetime.combine(date_jour, datetime.strptime(row["heure_fin"], "%H:%M").time())
            taches.append((d, f))
    taches.sort()

    # Construire les plages disponibles
    plages_libres = []
    cursor = debut_jour
    for d, f in taches:
        if cursor < d:
            plages_libres.append((cursor, d))
        cursor = max(cursor, f)
    if cursor < fin_jour:
        plages_libres.append((cursor, fin_jour))

    # Chercher une plage libre suffisamment longue
    temps_requis_td = timedelta(minutes=temps_requis)
    for debut, fin in plages_libres:
        duree = fin - debut
        if duree >= temps_requis_td:
            # ✅ Retourne l'heure réelle de début ET de fin
            h_debut_montage = debut
            h_fin_montage = debut + temps_requis_td
            return f"🟢 Montage possible de {h_debut_montage.strftime('%H:%M')} à {h_fin_montage.strftime('%H:%M')}"

    return "❌ Pas assez de créneaux disponibles"


# ===  SÉLECTEUR DE RÔLE ===
role = st.sidebar.selectbox("👤 Vous êtes :", ["Utilisateur", "Administrateur"])
if role == "Administrateur":
    mdp = st.text_input("🔐 Mot de passe administrateur", type="password")

    if mdp == "safran123":
        st.success("Accès administrateur accordé ✅")

        # Choix de la date et des horaires
        date_plan = st.date_input("📅 Date de planification", value=datetime.today())
        h_debut = st.time_input("Début de la journée", time(8, 0))
        h_fin = st.time_input("Fin de la journée", time(17, 0))

        if "admin_planning" not in st.session_state:
            st.session_state.admin_planning = []

        with st.form("form_admin"):
            col1, col2 = st.columns(2)
            with col1:
                tache_debut = st.time_input("Début tâche", time(9, 0), key="start_admin")
            with col2:
                tache_fin = st.time_input("Fin tâche", time(10, 0), key="end_admin")
            add_btn = st.form_submit_button("➕ Ajouter la tâche")
            if add_btn and tache_debut < tache_fin:
                st.session_state.admin_planning.append((str(date_plan), tache_debut.strftime("%H:%M"), tache_fin.strftime("%H:%M")))

        st.markdown("### 📌 Tâches planifiées :")
        for i, (jour, d, f) in enumerate(st.session_state.admin_planning):
            st.text(f"{i+1}. {jour} | {d} → {f}")

        if st.button("💾 Sauvegarder le planning"):
            df = pd.DataFrame(st.session_state.admin_planning, columns=["date", "heure_debut", "heure_fin"])
            df.to_csv("planning_admin.csv", index=False)
            st.success("Planning sauvegardé avec succès ✅")

    else:
        st.warning("🔒 Accès refusé. Mot de passe incorrect.")

# === 🧾 MODE UTILISATEUR ===
elif role == "Utilisateur":
    st.markdown("Chargez votre fichier de commande client (`commande_client.csv`).")

    # Chargement base Test_1.csv
    try:
        base_df = pd.read_csv("Test_1.csv")
        base_df['temps_montage'] = base_df['temps_montage'].astype(int)
    except Exception as e:
        st.error(f"❌ Impossible de charger Test_1.csv : {e}")
        st.stop()

    commande_file = st.file_uploader("📎 Charger votre commande (commande_client.csv)", type="csv")

    def calculer_temps(commande_df, base_df):
        total = 0
        erreurs = []
        for _, ligne in commande_df.iterrows():
            ref = ligne['reference']
            qte = ligne['quantite']
            ligne_base = base_df[base_df['reference'] == ref]
            if not ligne_base.empty:
                try:
                    temps = int(ligne_base.iloc[0]['temps_montage'])
                    total += temps * qte
                except:
                    erreurs.append(f"Erreur conversion pour : {ref}")
            else:
                erreurs.append(f"Référence inconnue : {ref}")
        return total, erreurs


    if commande_file:
        try:
            commande_df = pd.read_csv(commande_file)
            commande_df['quantite'] = commande_df['quantite'].astype(int)

            st.markdown("### 🗓️ Planning de l'opérateur (chargé par l'admin)")
            try:
                df_plan = pd.read_csv("planning_admin.csv")
                for i, row in df_plan.iterrows():
                    st.text(f"{row['date']} : {row['heure_debut']} → {row['heure_fin']}")
            except:
                st.info("Aucun planning trouvé.")
                df_plan = pd.DataFrame(columns=["date", "heure_debut", "heure_fin"])

            if st.button("▶️ Lancer le calcul du temps de montage"):
                total, erreurs = calculer_temps(commande_df, base_df)

                if not df_plan.empty:
                    date_jour = pd.to_datetime(df_plan.iloc[0]["date"]).date()
                else:
                    date_jour = datetime.today().date()

                heure_debut_journee = time(8, 0)
                heure_fin_journee = time(17, 0)

                date_dispo = trouver_disponibilite(date_jour, heure_debut_journee, heure_fin_journee, df_plan, total)

                st.success(f"✅ Temps total : {total} minutes")
                st.info(f"📅 Date estimée de disponibilité : {date_dispo}")

                if erreurs:
                    st.warning("⚠️ Problèmes :")
                    for e in erreurs:
                        st.text(f" - {e}")
        except Exception as e:
            st.error(f"Erreur : {e}")
